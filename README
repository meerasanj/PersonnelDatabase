// Project Description: This project involves creating a Java program for personnel management. The program is designed to manage and interact with employee records, allowing users to perform various operations on employee data. These operations include adding new employees, computing paychecks, raising wages, printing employee records, and downloading/uploading employee data to/from a file. The program contains multiple classes that handle different aspects of employee management, namely Employee.java, HourlyEmployee.java, SalariedEmployee.java, and Personnel.java. 

Understanding the Algorithm: The program begins by initializing an ArrayList of Employee objects, which store employee records. Then, a Scanner object reads the user input. The main menu is continuously displayed to the user through a loop, which displays the following commands: n - New employee, c - Compute paychecks, r - Raise wages, p - Print records, d - Download data, u - Upload data, q - Quit. When the user selects "n," a prompt asks for the employee's name and whether they are paid hourly (h) or salaried (s). Depending on the selection of “h” or “s,” the scanner reads the input and either a new HourlyEmployee object or a SalariedEmployee object is added to the ArrayList. When the user selects “c”, a for loop goes through each employee record and prompts the user to enter the number of hours worked. The paycheck is then computed based on the hourly wage and displayed to the user. The “r” command prompts the user to enter the percentage increase in wages. A for loop then iterates through each employee record in the ArrayList, adjusts the hourly wage or annual salary of the respective employees, and displays the updated records. The “p” command iterates through each employee record and prints each employee’s information. For "d" and "u" commands, the ArrayList of employees is saved or loaded to/from the “employee.dat” file. Lastly, the “q” command exits the program.  

Classes and Operations: The Employee Class is an abstract class that serves as the base for all employees. It defines attributes like name, which is common to all employees. The HourlyEmployee class extends the `Employee` class and adds attributes like hourly wage and operations for raising wages. It also overrides the computePay method to calculate pay based on hours worked. The SalariedEmployee class extends the `Employee` class. It includes attributes such as annual salary and provides methods for adjusting annual salary and computing pay. The Personnel class, or driver program, contains the main method and handles user interaction and menu display. The program is controlled by this class, which maintains the ArrayList of employees. The methods in this class allow users to add employees, compute paychecks, raise wages, print records, upload data, and download data.

Data Input and Output: For this program, users input employee data, such as employee names, type of pay (hourly or salaried), hourly wages, annual salaries, hours worked, and percentage wage increases. The program outputs computations, employee records, and messages to the console. When the user enters “d,” employee data is serialized and saved to an "employee.dat" file. When the user enters “u,” the data is loaded from this file. The data saved in the "employee.dat" file is in a serialized binary format in order to retain the structure of the ArrayList. 



